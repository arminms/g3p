//
// Copyright (c) 2023-24 Armin Sobhani
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#ifndef _G3P_GNUPLOT_
#define _G3P_GNUPLOT_

#include <fstream>
#include <cstdio>
#include <string>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <type_traits>
#include <chrono>
#include <thread>
#include <algorithm>
#include <filesystem>
#include <stdexcept>
#include <random>

#ifdef __CLING__
#   include <unordered_map>
#   include <xcpp/xdisplay.hpp>
#   include <xtl/xbase64.hpp>
#   include <nlohmann/json.hpp>
#endif //__CLING__

namespace g3p
{

// -- implementation details ---------------------------------------------------

    namespace detail
    {   inline std::string random_name(const int len = 8)
        {   static const char alphanum[] =
                "1234567890"
                "abcdefghijklmnopqrstuvwxyz";
            std::string tmp_s;
            tmp_s.reserve(len);
            std::default_random_engine rng(std::random_device{}());
            std::uniform_int_distribution<> dist(0, sizeof(alphanum) - 2);
            for (int i = 0; i < len; ++i)
                tmp_s += alphanum[dist(rng)];
            return tmp_s;
        }

        inline std::string tmpnam()
        {   auto filename = std::filesystem::temp_directory_path().string();
            filename += "/g3p" + random_name(16);
            return filename;
        }

        std::string get_last_lines
        (   const std::string& filename
        ,   size_t line_count
        )
        {   const size_t granularity = 100 * line_count;
            std::ifstream source(filename, std::ios::binary);
            source.seekg(0, std::ios_base::end);
            size_t size = static_cast<size_t>(source.tellg());
            std::vector<char> buffer;
            int new_line_count = 0;
            while
            (   source
            &&  buffer.size() != size
            &&  new_line_count < line_count
            )
            {   buffer.resize(std::min(buffer.size() + granularity, size));
                source.seekg
                (   -static_cast<std::streamoff>(buffer.size())
                ,   std::ios::end
                );
                source.read(buffer.data(), buffer.size());
                new_line_count = std::count(buffer.begin(), buffer.end(), '\n');
            }
            auto start = buffer.begin();
            while (new_line_count > line_count)
            {   start = std::find(start, buffer.end(), '\n') + 1;
                --new_line_count;
            }
#ifdef   _MSC_VER
            auto end = std::remove(start, buffer.end(), '\r');
#else
            auto end = buffer.end();
#endif //_MSC_VER
            return std::string(start, end);
        }

        void wait4tag(const std::string& tag, const std::string& filename)
        {   while (tag != get_last_lines(filename, 1))
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }

#ifdef __CLING__
        static std::unordered_map<std::string, std::string> mime
        {   {   "gif"      , "image/gif"       }
        ,   {   "jpeg"     , "image/jpeg"      }
        ,   {   "png"      , "image/png"       }
        ,   {   "pngcairo" , "image/png"       }
        ,   {   "svg"      , "image/svg+xml"   }
        };
#endif //__CLING__
    }

// -- simulated ostream manipulators -------------------------------------------

    const std::string end("e\n");
    const std::string endl("_G3P_ENDL_");
    const std::string eod("EOD\n");
    const std::string flush("_G3P_FLUSH_");

    class gnuplot
    {
// -- disabled copy constructor and assignment operator -----------------------

        gnuplot(const gnuplot&) = delete;
        void operator= (const gnuplot&) = delete;

// -- ostream operator handlers ------------------------------------------------

        template<typename T>
        void ostream_opr_impl(T arg, std::true_type) const
        {   std::string s(arg);
            if ("_G3P_FLUSH_" == s)
                fflush(_gp);
            else if ("_G3P_ENDL_" == s)
            {   fprintf(_gp, "\n");
                fflush(_gp);
            }
            else
                fprintf(_gp, " %s", s.c_str());
        }
        template<typename T>
        void ostream_opr_impl(T arg, std::false_type) const
        {   fprintf(_gp, " %s", std::to_string(arg).c_str());   }

// -- member variables ---------------------------------------------------------

        FILE* _gp;
        std::string _logfile;
#ifdef __CLING__
        std::string _plotfile;
#endif  //__CLING__

    public:
        gnuplot(bool persist = true, std::string logfile = {})
        :   _gp(nullptr)
        ,   _logfile(logfile)
        {   const char* gnuplot_path = std::getenv("G3P_GNUPLOT_PATH");
            std::string gnuplot_cmd = gnuplot_path ? gnuplot_path : "gnuplot";
            if (nullptr != gnuplot_path)
                gnuplot_cmd.insert(0, 1, '\"').append(1, '\"');
            if (_logfile.empty())
                _logfile = detail::tmpnam();
            if (persist)
                gnuplot_cmd += " -persist";
            gnuplot_cmd += " > " + _logfile + " 2>&1";
#ifdef _MSC_VER // possibly _WIN32 for MingW-64?
            _gp = _popen
#else
            _gp =  popen
#endif //_MSC_VER
                (gnuplot_cmd.c_str(), "w");
            if (nullptr == _gp)
                throw std::domain_error("gnuplot -- failed");
            fprintf(_gp, "print '>> gnuplot log generated by g3p <<'\n");
            fprintf(_gp, "print 'version: ',GPVAL_VERSION\n");
            fprintf(_gp, "print 'patchlevel: ',GPVAL_PATCHLEVEL\n");
            fprintf(_gp, "print 'system: ',GPVAL_SYSNAME\n");
            fprintf(_gp, "print 'arch: ',GPVAL_MACHINE;print ' '\n");
#ifdef __CLING__
            _plotfile = detail::tmpnam();
            fprintf(_gp, "set term push\n");
            fprintf(_gp, "set term svg standalone enhanced\n");
            fprintf(_gp, "set output \"%s\"\n", _plotfile.c_str());
#endif //__CLING__
        }

        ~gnuplot()
        {
#ifdef _MSC_VER
            if (_gp) _pclose(_gp);
#else
            if (_gp) pclose(_gp);
#endif //_MSC_VER
            std::filesystem::path f(_logfile);
            std::filesystem::remove(f);
#ifdef __CLING__
            f = _plotfile;
            std::filesystem::remove(f);
#endif //__CLING__
        }

// -- log file -----------------------------------------------------------------

        std::string log(size_t line_count = 0) const
        {   sync();
            std::string log;
            if (0 == line_count)
            {   std::ifstream fin(_logfile);
                std::stringstream logstream;
                logstream << fin.rdbuf();
                log = logstream.str();
                return log.erase(log.size() - 9, 9);
            }
            else
            {   log = detail::get_last_lines(_logfile, line_count + 1);
                return log.erase(log.size() - 9, 9);
            }
        }

#ifdef __CLING__

// -- plot file (cling only) ---------------------------------------------------

        std::string plotfile() const
        {   return _plotfile;   }

#endif //__CLING__

// -- sync helper function -------------------------------------------------

        const gnuplot& sync() const
        {   auto tag = detail::random_name(8);
            fprintf(_gp, "print '%s'\n", tag.c_str());
            fflush(_gp);
            tag += '\n';
            std::thread t(detail::wait4tag, tag, _logfile);
            t.join();
            return *this;
        }

#ifdef __GNUG__
#       pragma GCC diagnostic push
#       pragma GCC diagnostic ignored "-Wformat-security"
#endif //__GNUG__
        template<typename... Args>
        const gnuplot& operator() (Args&&... args) const
        {   fprintf(_gp, std::forward<Args>(args)...);
            fprintf(_gp, "\n");
            return *this;
        }
#ifdef __GNUG__
#       pragma GCC diagnostic pop
#endif //__GNUG__

        template<typename T>
        const gnuplot& operator<< (T arg) const
        {   ostream_opr_impl(arg, std::is_compound<T>());
            return *this;
        }

        std::istringstream operator>> (size_t line_count) const
        {   sync();
            auto line = detail::get_last_lines(_logfile, line_count + 1);
            line.erase(line.size() - 9, 9);
            std::istringstream iss{line};
            return iss;
        }

        const gnuplot& endl() const
        {   fprintf(_gp, "\n");
            return *this;
        }

        const gnuplot& end() const
        {   fprintf(_gp, "e\n");
            return *this;
        }

        const gnuplot& flush() const
        {   fflush(_gp);
            return *this;
        }
    };

    template<typename T>
    inline std::string make_data_block(const gnuplot& gp, const T& c)
    {   std::string name{" $"};
        name += detail::random_name(8);
        name += ' ';
        gp  ("%s<< EOD", name.c_str())
            ("%s\nEOD", c(gp).c_str());
        return name;
    }
    template<typename T>
    inline std::string make_data_block
    (   const gnuplot& gp
    ,   const T& c
    ,   typename T::size_type row 
    ,   typename T::size_type sep = 0 // separator
    )
    {   std::string name{" $"};
        name += detail::random_name(8);
        name += ' ';
        gp("%s<< EOD", name.c_str());
        auto it = std::begin(c);
        for (typename T::size_type i = 0; i < (c.size() / row); ++i)
        {   if (sep && 0 == i % sep && i)
                gp.endl();
            for (typename T::size_type j = 0; j < row; ++j, ++it)
                gp << *it;
            gp.endl();
        }
        gp("\nEOD");
        return name;
    }

#ifdef __CLING__
    nlohmann::json mime_bundle_repr(const gnuplot& gp)
    {   gp.sync();
        std::filesystem::path f(gp.plotfile());
        if (0 == std::filesystem::file_size(f))
            gp("replot").sync();
        auto bundle = nlohmann::json::object();
        std::string term;
        gp("print GPVAL_TERM") >> 1 >> term;
        auto type = detail::mime.find(term);
        if (type == detail::mime.end())
            bundle["text/html"] =
                "<table style=\"width:100%;\">"
                "<tr><td style=\"background-color:#ffdddd;text-align:left;\">"
                "<span style=\"color:#b22b31\">error: </span>"
                "the terminal type is not supported by g3p"
                "</td></tr></table>";
        else
        {   std::ifstream fin(gp.plotfile(), std::ios::binary);
            std::stringstream buffer;
            buffer << fin.rdbuf();
            if ("svg" == term)
                bundle[detail::mime[term]] = buffer.str();
            else
                bundle[detail::mime[term]] = xtl::base64encode(buffer.str());
        }
        std::filesystem::remove(f);
        gp("set output \"%s\"", f.c_str());
        return bundle;
    }
#endif //__CLING__

} // end g3p namespace

#endif  // _G3P_GNUPLOT_
